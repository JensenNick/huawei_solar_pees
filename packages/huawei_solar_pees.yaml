# -----------------------------------------------------
# HUAWEI SOLAR PEES - Power, Energy and Economy Sensors
# -----------------------------------------------------
# version: 
# branch: alpha-030
# domain: https://github.com/JensenNick/huawei_solar_pees
# codeowner: Nick Jensen
#
# This is a complete package file with the sensors included in the "Huawei Solar
# PEES package". For "installation" follow the steps below.
#
# Create a root folder named "packages".
# Import this file to the "packages-folder".
# Ad the following lines to your configuration.yaml file (remove the hashtag "#"
# and the 1 indentation).
#
# homeassistant:
#   packages: !include_dir_named packages
#
# Make sure the naming of your power input sensors is correct.
# - 'sensor.inverter_input_power' (from the Huawei Solar integration)
# - 'sensor.inverter_input_power_2' (from the Huawei Solar integration)
# - 'sensor.power_meter_active_power' (from the Huawei Solar integration)
# - 'sensor.batteries_charge_discharge_power' (from the Huawei Solar integration)
#
# The "Huawei Solar PEES package" will use the electricity price sensors from the
# "Energi Data Service integration" by MTrab as default.
#
# If you wish to provide your own electricity price sensors and/or your own currency
# and/or if you wish to use the provided efficiency corrected power input sensor,
# I recomend you "install" the "Huawei Solar PEES Input" file and the Lovelace Input
# card. This will make it possible for you to save your specific solar PV settings
# from between updates of the package.
#
# The currency used is DKK by default. If you use another currency you need to change
# this in this file. I advice you not make any other changes.
#
# Restart Home Assistant and refresh your browser.
#
# -------
# SENSORS
# -------
sensor:
  ## --------------
  ## Energy Sensors
  - platform: integration
    source: sensor.pees_power_battery_charge
    name: "PEES Energy Battery Charge"
    unique_id: pees_energy_battery_charge
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_battery_charge_grid
    name: "PEES Energy Battery Charge Grid"
    unique_id: pees_energy_battery_charge_grid
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_battery_charge_yield
    name: "PEES Energy Battery Charge Yield"
    unique_id: pees_energy_battery_charge_yield
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_battery_discharge
    name: "PEES Energy Battery Discharge"
    unique_id: pees_energy_battery_discharge
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_battery_discharge_grid
    name: "PEES Energy Battery Discharge Grid"
    unique_id: pees_energy_battery_discharge_grid
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_battery_discharge_house
    name: "PEES Energy Battery Discharge House"
    unique_id: pees_energy_battery_discharge_house
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_import
    name: "PEES Energy Import"
    unique_id: pees_energy_import
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_export
    name: "PEES Energy Export"
    unique_id: pees_energy_export
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_house_load
    name: "PEES Energy House Load"
    unique_id: pees_energy_house_load
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_house_load_grid
    name: "PEES Energy House Load Grid"
    unique_id: pees_energy_house_load_grid
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_house_load_yield
    name: "PEES Energy House Load Yield"
    unique_id: pees_energy_house_load_yield
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_inverter_1_input
    name: "PEES Energy Yield #1"
    unique_id: pees_energy_yield_1
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_inverter_2_input
    name: "PEES Energy Yield #2"
    unique_id: pees_energy_yield_2
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    source: sensor.pees_power_export_yield
    name: "PEES Energy Export Yield"
    unique_id: pees_energy_export_yield
    round: 6
    unit_prefix: k
    unit_time: h
    method: left
# ----------------
# TEMPLATE SENSORS
# ----------------
template:
  - sensor:
      ## ------------------
      ## Electricity Prices
      - name: "PEES Electricity Price Import"
        unique_id: pees_electricity_price_import
        unit_of_measurement: DKK
        state_class: measurement
        state: >-
          {% if is_state('input_text.pees_electricity_price_import','') or
          is_state('input_text.pees_electricity_price_import','unavailable') or
          is_state('input_text.pees_electricity_price_import','unknown') %}
            {{ states('sensor.energi_data_service') | float(0) }}
          {% else %}
            {{ states(states('input_text.pees_electricity_price_import')) | float(0) }}
          {% endif %}
      - name: "PEES Electricity Price Export"
        unique_id: pees_electricity_price_export
        unit_of_measurement: DKK
        state_class: measurement
        state: >-
          {% if is_state('input_text.pees_electricity_price_export','') or
          is_state('input_text.pees_electricity_price_export','unavailable') or
          is_state('input_text.pees_electricity_price_export','unknown') %}
            {{ states('sensor.energi_data_service_sale') | float(0) }}
          {% else %}
            {{ states(states('input_text.pees_electricity_price_export')) | float(0) }}
          {% endif %}
      ## -------------
      ## Power Sensors
      - name: "PEES Power Inverter #1 Input"
        unique_id: pees_power_inverter_1_input
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {% if is_state('input_boolean.pees_efficiency_corrected_power_input','on') and
          states('sensor.pees_inverter_1_model') | regex_search('-L1|-LC0|-1PH') %}
            {% set inverter_rating = states('sensor.pees_inverter_1_rated_power') | float %}
            {% set overall_factor = states('input_number.pees_inverter_1_overall_factor') | float / 100 %}
            {% set operating_voltage = states('input_number.pees_inverter_1_operating_voltage_l1') | float(0) %}
            {% set input_power = states('sensor.inverter_input_power') | float(0) %}
            {% set load_factor = ( input_power / inverter_rating * 100 ) | float(0) %}
            {% set efficiency = ( 98.25 / (1 + 0.11 * e**(-0.18 * load_factor))) | float(0) %}
            {% if operating_voltage < 360 %}
              {% set voltage_factor = (
              ( -0.01 * operating_voltage + 3.6 ) * 
              ( -1.04 / ( 1 - 0.68 * e**( -0.07 * load_factor)))
              ) | float(0) %}
            {% elif operating_voltage > 360 %}
              {% set voltage_factor = (
              ( 0.0083 * operating_voltage + 3 ) * 
              ( -0.5 / ( 1 - 0.89 * e**( -0.04 * load_factor)))
              ) | float(0) %}
            {% else %}
              {% set voltage_factor = 0 %}
            {% endif %}
              {{ (( overall_factor * input_power * (efficiency + voltage_factor) / 100 ) | float(0) ) | round(0) }}
          {% elif is_state('input_boolean.pees_efficiency_corrected_power_input','on') and
          states('sensor.pees_inverter_1_model') | regex_search('-M1|-MAP0|-MB0|-3PH') %}
            {% set inverter_rating = states('sensor.pees_inverter_1_rated_power') | float %}
            {% set overall_factor = states('input_number.pees_inverter_1_overall_factor') | float / 100 %}
            {% set operating_voltage = states('input_number.pees_inverter_1_operating_voltage_m1') | float(0) %}
            {% set input_power = states('sensor.inverter_input_power') | float(0) %}
            {% set load_factor = ( input_power / inverter_rating * 100 ) | float(0) %}
            {% set efficiency = (98.5 / (1 + 0.082 * e**(-0.145 * load_factor))) | float(0) %}
            {% if operating_voltage < 600 %}
              {% set voltage_factor = (
              ( -0.0077 * operating_voltage + 4.6154 ) * 
              ( -0.705 / ( 1 - 0.56 * e**( -0.05 * load_factor)))
              ) | float(0) %}
            {% elif operating_voltage > 600 %}
            {% set voltage_factor = (
              ( 0.004 * operating_voltage - 2.4 ) * 
              ( -0.587 / ( 1 - 0.845 * e**( -0.05 * load_factor)))
              ) | float(0) %}
            {% else %}
              {% set voltage_factor = 0 %}
            {% endif %}
              {{ (( overall_factor * input_power * (efficiency + voltage_factor) / 100) | float(0) ) | round(0) }}
          {% else %}
            {{ states('sensor.inverter_input_power') | float(0) }}
          {% endif %}
      - name: "PEES Power Inverter #2 Input"
        unique_id: pees_power_inverter_2_input
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {% if is_state('input_boolean.pees_efficiency_corrected_power_input','on') and
          states('sensor.pees_inverter_2_model') | regex_search('-L1|-LC0|-1PH') %}
            {% set inverter_rating = states('sensor.pees_inverter_2_rated_power') | float %}
            {% set overall_factor = states('input_number.pees_inverter_2_overall_factor') | float / 100 %}
            {% set operating_voltage = states('input_number.pees_inverter_2_operating_voltage_l1') | float(0) %}
            {% set input_power = states('sensor.inverter_input_power_2') | float(0) %}
            {% set load_factor = ( input_power / inverter_rating * 100 ) | float(0) %}
            {% set efficiency = ( 98.25 / (1 + 0.11 * e**(-0.18 * load_factor))) | float(0) %}
            {% if operating_voltage < 360 %}
              {% set voltage_factor = (
              ( -0.01 * operating_voltage + 3.6 ) * 
              ( -1.04 / ( 1 - 0.68 * e**( -0.07 * load_factor)))
              ) | float(0) %}
            {% elif operating_voltage > 360 %}
              {% set voltage_factor = (
              ( 0.0083 * operating_voltage + 3 ) * 
              ( -0.5 / ( 1 - 0.89 * e**( -0.04 * load_factor)))
              ) | float(0) %}
            {% else %}
              {% set voltage_factor = 0 %}
            {% endif %}
              {{ (( overall_factor * input_power * (efficiency + voltage_factor) / 100 ) | float(0) ) | round(0) }}
          {% elif is_state('input_boolean.pees_efficiency_corrected_power_input','on') and
          states('sensor.pees_inverter_2_model') | regex_search('-M1|-MAP0|-MB0|-3PH') %}
            {% set inverter_rating = states('sensor.pees_inverter_2_rated_power') | float %}
            {% set overall_factor = states('input_number.pees_inverter_2_overall_factor') | float / 100 %}
            {% set operating_voltage = states('input_number.pees_inverter_2_operating_voltage_m1') | float(0) %}
            {% set input_power = states('sensor.inverter_input_power_2') | float(0) %}
            {% set load_factor = ( input_power / inverter_rating * 100 ) | float(0) %}
            {% set efficiency = (98.5 / (1 + 0.082 * e**(-0.145 * load_factor))) | float(0) %}
            {% if operating_voltage < 600 %}
              {% set voltage_factor = (
              ( -0.0077 * operating_voltage + 4.6154 ) * 
              ( -0.705 / ( 1 - 0.56 * e**( -0.05 * load_factor)))
              ) | float(0) %}
            {% elif operating_voltage > 600 %}
            {% set voltage_factor = (
              ( 0.004 * operating_voltage - 2.4 ) * 
              ( -0.587 / ( 1 - 0.845 * e**( -0.05 * load_factor)))
              ) | float(0) %}
            {% else %}
              {% set voltage_factor = 0 %}
            {% endif %}
              {{ (( overall_factor * input_power * (efficiency + voltage_factor) / 100) | float(0) ) | round(0) }}
          {% else %}
            {{ states('sensor.inverter_input_power_2') | float(0) }}
          {% endif %}
      - name: "PEES Power Inverter Input Total"
        unique_id: pees_power_inverter_input_total
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ states('sensor.pees_power_inverter_1_input') | float(0) +
          states('sensor.pees_power_inverter_2_input') | float(0) }}
      - name: "PEES Power Export"
        unique_id: pees_power_export
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.power_meter_active_power') | float(0)
          , 0 ) | max }}
      - name: "PEES Power Import"
        unique_id: pees_power_import
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.power_meter_active_power') | float(0)
          , 0 ) | min | abs }}
      - name: "PEES Power Battery Charge"
        unique_id: pees_power_battery_charge
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.batteries_charge_discharge_power') | float(0)
          , 0 ) | max }}
      - name: "PEES Power Battery Discharge"
        unique_id: pees_power_battery_discharge
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.batteries_charge_discharge_power') | float(0)
          , 0 ) | min | abs }}
      - name: "PEES Power House Load"
        unique_id: pees_power_house_load
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.pees_power_inverter_1_input') | float(0) +
          states('sensor.pees_power_inverter_2_input') | float(0) -
          states('sensor.power_meter_active_power') | float(0) -
          states('sensor.batteries_charge_discharge_power') | float(0)
          , 0 ) | max }}
      - name: "PEES Power House Load Yield"
        unique_id: pees_power_house_load_yield
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {% if states('sensor.pees_power_house_load') | float(0) >
          ( states('sensor.pees_power_inverter_1_input') | float(0) +
          states('sensor.pees_power_inverter_2_input') | float(0) ) %}
            {{ states('sensor.pees_power_inverter_1_input') | float(0) +
            states('sensor.pees_power_inverter_2_input') | float(0) }}
          {% else %}
            {{ states('sensor.pees_power_house_load') | float(0) }}
          {% endif %}
      - name: "PEES Power Battery Charge Yield"
        unique_id: pees_power_battery_charge_yield
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.pees_power_inverter_1_input') | float(0) +
          states('sensor.pees_power_inverter_2_input') | float(0) -
          states('sensor.pees_power_house_load_yield') | float(0) -
          states('sensor.pees_power_export') | float(0)
          , 0 ) | max }}
      - name: "PEES Power Battery Charge Grid"
        unique_id: pees_power_battery_charge_grid
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.pees_power_battery_charge') | float(0) -
          states('sensor.pees_power_battery_charge_yield') | float(0)
          , 0 ) | max }}
      - name: "PEES Power Export Yield"
        unique_id: pees_power_export_yield
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.pees_power_inverter_1_input') | float(0) +
          states('sensor.pees_power_inverter_2_input') | float(0) -
          states('sensor.pees_power_house_load_yield') | float(0) -
          states('sensor.pees_power_battery_charge_yield') | float(0)
          , 0 ) | max }}
      - name: "PEES Power Battery Discharge Grid"
        unique_id: pees_power_battery_discharge_grid
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.pees_power_export') | float(0) -
          states('sensor.pees_power_export_yield') | float(0)
          , 0 ) | max }}
      - name: "PEES Power Battery Discharge House"
        unique_id: pees_power_battery_discharge_house
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.pees_power_battery_discharge') | float(0) -
          states('sensor.pees_power_battery_discharge_grid') | float(0)
          , 0 ) | max }}
      - name: "PEES Power House Load Grid"
        unique_id: pees_power_house_load_grid
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >-
          {{ (
          states('sensor.pees_power_house_load') | float(0) -
          states('sensor.pees_power_house_load_yield') | float(0) -
          states('sensor.pees_power_battery_discharge_house') | float(0)
          , 0 ) | max }}
      ## --------------
      ## Energy Sensors
      - name: "PEES Energy Yield Total"
        unique_id: pees_energy_yield_total
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        state: >-
          {{ states('sensor.pees_energy_yield_1') | float +
          states('sensor.pees_energy_yield_2') | float }}
        availability: >
          {{ has_value('sensor.pees_energy_yield_1') and
          has_value('sensor.pees_energy_yield_2') }}
      ## ---------------
      ## Economy Sensors
## ---------------
## Economy Sensors
      - name: "PEES Economy - Result wo PV"
        unique_id: pees_economy_result_wo_pv
        unit_of_measurement: DKK
        state_class: total_increasing
        state: >-
          {{ states('sensor.pees_house_load_cost') | float(0) | round(5) }}
        availability: >
          {{ has_value('sensor.pees_house_load_cost') }}
      - name: "PEES Economy - Expenses w PV"
        unique_id: pees_economy_expenses_w_pv
        unit_of_measurement: DKK
        state_class: total_increasing
        state: >-
          {{ states('sensor.pees_import_cost') | float(0) | round(5) }}
        availability: >
          {{ has_value('sensor.pees_import_cost') }}
      - name: "PEES Economy - Income w PV"
        unique_id: pees_economy_income_w_pv
        unit_of_measurement: DKK
        state_class: total_increasing
        state: >-
          {{ states('sensor.pees_export_income') | float(0) | round(5) }}
        availability: >
          {{ has_value('sensor.pees_export_income') }}
      - name: "PEES Economy - Result w PV"
        unique_id: pees_economy_result_w_pv
        unit_of_measurement: DKK
        state_class: total
        state: >-
          {{ (
          states('sensor.pees_import_cost') | float -
          states('sensor.pees_export_income') | float 
          ) | round(5) }}
        availability: >
          {{ has_value('sensor.pees_import_cost') or
          has_value('sensor.pees_export_income') }}
      - name: "PEES Economy - NRI PV"
        unique_id: pees_economy_nri_pv
        unit_of_measurement: DKK
        state_class: total
        state: >-
          {{ (
          states('sensor.pees_house_load_cost') | float -
          states('sensor.pees_import_cost') | float +
          states('sensor.pees_export_income') | float 
          ) | round(5) }}
        availability: >
          {{ has_value('sensor.pees_house_load_cost') or
          has_value('sensor.pees_import_cost') or
          has_value('sensor.pees_export_income') }}
      - name: "PEES Economy - NRI Battery"
        unique_id: pees_economy_nri_battery
        unit_of_measurement: DKK
        state_class: total
        state: >-
          {{ (
          states('sensor.pees_battery_discharge_grid_sale') | float +
          states('sensor.pees_battery_discharge_house_saving') | float -
          states('sensor.pees_battery_charge_yield_sale') | float -
          states('sensor.pees_battery_charge_grid_cost') | float 
          ) | round(5) }}
        availability: >
          {{ has_value('sensor.pees_battery_discharge_grid_sale') or
          has_value('sensor.pees_battery_discharge_house_saving') or
          has_value('sensor.pees_battery_charge_yield_sale') or
          has_value('sensor.pees_battery_charge_grid_cost') }}
  # ------------------------
  # TEMPLATE TRIGGER SENSORS
  # ------------------------
  ## ---------------
  ## Economy Sensors
  - trigger:
      - trigger: state
        entity_id: sensor.pees_energy_battery_charge_grid
    sensor:
      - name: "PEES Battery Charge Grid - Cost"
        unique_id: pees_battery_charge_grid_cost
        unit_of_measurement: DKK
        device_class: monetary
        state: >-
          {% set price = states('sensor.pees_electricity_price_import') | float(0) %}
          {% set meter = states('sensor.pees_energy_battery_charge_grid') | float(0) %}
          {% if meter > 0 and this.attributes.last is defined %}
            {% set delta = meter - this.attributes.last | float(0) %}
          {% else %}
            {% set delta = 0 %}
          {% endif %}
            {{ price * delta }}
        attributes:
          last: >-
            {% if this.attributes.last is defined %}
              {% set lastlast = this.attributes.last | float(0) %}
            {% else %}
              {% set lastlast = 0 %}
            {% endif %}
            {% set meter = states('sensor.pees_energy_battery_charge_grid') | float(0) %}
            {% if meter > 0 %}
              {{ meter }}
            {% else %}
              {{ lastlast }}
            {% endif %}
  - trigger:
      - trigger: state
        entity_id: sensor.pees_energy_battery_charge_yield
    sensor:
      - name: "PEES Battery Charge Yield - Sale"
        unique_id: pees_battery_charge_yield_sale
        unit_of_measurement: DKK
        device_class: monetary
        state: >-
          {% set price = states('sensor.pees_electricity_price_export') | float(0) %}
          {% set meter = states('sensor.pees_energy_battery_charge_yield') | float(0) %}
          {% if meter > 0 and this.attributes.last is defined %}
            {% set delta = meter - this.attributes.last | float(0) %}
          {% else %}
            {% set delta = 0 %}
          {% endif %}
            {{ price * delta }}
        attributes:
          last: >-
            {% if this.attributes.last is defined %}
              {% set lastlast = this.attributes.last | float(0) %}
            {% else %}
              {% set lastlast = 0 %}
            {% endif %}
            {% set meter = states('sensor.pees_energy_battery_charge_yield') | float(0) %}
            {% if meter > 0 %}
              {{ meter }}
            {% else %}
              {{ lastlast }}
            {% endif %}
  - trigger:
      - trigger: state
        entity_id: sensor.pees_energy_battery_discharge_house
    sensor:
      - name: "PEES Battery Discharge House - Saving"
        unique_id: pees_battery_discharge_house_saving
        unit_of_measurement: DKK
        device_class: monetary
        state: >-
          {% set price = states('sensor.pees_electricity_price_import') | float(0) %}
          {% set meter = states('sensor.pees_energy_battery_discharge_house') | float(0) %}
          {% if meter > 0 and this.attributes.last is defined %}
            {% set delta = meter - this.attributes.last | float(0) %}
          {% else %}
            {% set delta = 0 %}
          {% endif %}
            {{ price * delta }}
        attributes:
          last: >-
            {% if this.attributes.last is defined %}
              {% set lastlast = this.attributes.last | float(0) %}
            {% else %}
              {% set lastlast = 0 %}
            {% endif %}
            {% set meter = states('sensor.pees_energy_battery_discharge_house') | float(0) %}
            {% if meter > 0 %}
              {{ meter }}
            {% else %}
              {{ lastlast }}
            {% endif %}
  - trigger:
      - trigger: state
        entity_id: sensor.pees_energy_battery_discharge_grid
    sensor:
      - name: "PEES Battery Discharge Grid - Sale"
        unique_id: pees_battery_discharge_grid_sale
        unit_of_measurement: DKK
        device_class: monetary
        state: >-
          {% set price = states('sensor.pees_electricity_price_export') | float(0) %}
          {% set meter = states('sensor.pees_energy_battery_discharge_grid') | float(0) %}
          {% if meter > 0 and this.attributes.last is defined %}
            {% set delta = meter - this.attributes.last | float(0) %}
          {% else %}
            {% set delta = 0 %}
          {% endif %}
            {{ price * delta }}
        attributes:
          last: >-
            {% if this.attributes.last is defined %}
              {% set lastlast = this.attributes.last | float(0) %}
            {% else %}
              {% set lastlast = 0 %}
            {% endif %}
            {% set meter = states('sensor.pees_energy_battery_discharge_grid') | float(0) %}
            {% if meter > 0 %}
              {{ meter }}
            {% else %}
              {{ lastlast }}
            {% endif %}
  - trigger:
      - trigger: state
        entity_id: sensor.pees_energy_export
    sensor:
      - name: "PEES Export - Income"
        unique_id: pees_export_income
        unit_of_measurement: DKK
        device_class: monetary
        state: >-
          {% set price = states('sensor.pees_electricity_price_export') | float(0) %}
          {% set meter = states('sensor.pees_energy_export') | float(0) %}
          {% if meter > 0 and this.attributes.last is defined %}
            {% set delta = meter - this.attributes.last | float(0) %}
          {% else %}
            {% set delta = 0 %}
          {% endif %}
            {{ price * delta }}
        attributes:
          last: >-
            {% if this.attributes.last is defined %}
              {% set lastlast = this.attributes.last | float(0) %}
            {% else %}
              {% set lastlast = 0 %}
            {% endif %}
            {% set meter = states('sensor.pees_energy_export') | float(0) %}
            {% if meter > 0 %}
              {{ meter }}
            {% else %}
              {{ lastlast }}
            {% endif %}
  - trigger:
      - trigger: state
        entity_id: sensor.pees_energy_import
    sensor:
      - name: "PEES Import - Cost"
        unique_id: pees_import_cost
        unit_of_measurement: DKK
        device_class: monetary
        state: >-
          {% set price = states('sensor.pees_electricity_price_import') | float(0) %}
          {% set meter = states('sensor.pees_energy_import') | float(0) %}
          {% if meter > 0 and this.attributes.last is defined %}
            {% set delta = meter - this.attributes.last | float(0) %}
          {% else %}
            {% set delta = 0 %}
          {% endif %}
            {{ price * delta }}
        attributes:
          last: >-
            {% if this.attributes.last is defined %}
              {% set lastlast = this.attributes.last | float(0) %}
            {% else %}
              {% set lastlast = 0 %}
            {% endif %}
            {% set meter = states('sensor.pees_energy_import') | float(0) %}
            {% if meter > 0 %}
              {{ meter }}
            {% else %}
              {{ lastlast }}
            {% endif %}
  - trigger:
      - trigger: state
        entity_id: sensor.pees_energy_house_load
    sensor:
      - name: "PEES House Load - Cost"
        unique_id: pees_house_load_cost
        unit_of_measurement: DKK
        device_class: monetary
        state: >-
          {% set price = states('sensor.pees_electricity_price_import') | float(0) %}
          {% set meter = states('sensor.pees_energy_house_load') | float(0) %}
          {% if meter > 0 and this.attributes.last is defined %}
            {% set delta = meter - this.attributes.last | float(0) %}
          {% else %}
            {% set delta = 0 %}
          {% endif %}
            {{ price * delta }}
        attributes:
          last: >-
            {% if this.attributes.last is defined %}
              {% set lastlast = this.attributes.last | float(0) %}
            {% else %}
              {% set lastlast = 0 %}
            {% endif %}
            {% set meter = states('sensor.pees_energy_house_load') | float(0) %}
            {% if meter > 0 %}
              {{ meter }}
            {% else %}
              {{ lastlast }}
            {% endif %}
  - trigger:
      - trigger: state
        entity_id: sensor.pees_energy_house_load_grid
    sensor:
      - name: "PEES House Load Grid - Cost"
        unique_id: pees_house_load_grid_cost
        unit_of_measurement: DKK
        device_class: monetary
        state: >-
          {% set price = states('sensor.pees_electricity_price_import') | float(0) %}
          {% set meter = states('sensor.pees_energy_house_load_grid') | float(0) %}
          {% if meter > 0 and this.attributes.last is defined %}
            {% set delta = meter - this.attributes.last | float(0) %}
          {% else %}
            {% set delta = 0 %}
          {% endif %}
            {{ price * delta }}
        attributes:
          last: >-
            {% if this.attributes.last is defined %}
              {% set lastlast = this.attributes.last | float(0) %}
            {% else %}
              {% set lastlast = 0 %}
            {% endif %}
            {% set meter = states('sensor.pees_energy_house_load_grid') | float(0) %}
            {% if meter > 0 %}
              {{ meter }}
            {% else %}
              {{ lastlast }}
            {% endif %}
  - trigger:
      - trigger: state
        entity_id: sensor.pees_energy_house_load_yield
    sensor:
      - name: "PEES House Load Yield - Saving"
        unique_id: pees_house_load_yield_saving
        unit_of_measurement: DKK
        device_class: monetary
        state: >-
          {% set price = states('sensor.pees_electricity_price_import') | float(0) %}
          {% set meter = states('sensor.pees_energy_house_load_yield') | float(0) %}
          {% if meter > 0 and this.attributes.last is defined %}
            {% set delta = meter - this.attributes.last | float(0) %}
          {% else %}
            {% set delta = 0 %}
          {% endif %}
            {{ price * delta }}
        attributes:
          last: >-
            {% if this.attributes.last is defined %}
              {% set lastlast = this.attributes.last | float(0) %}
            {% else %}
              {% set lastlast = 0 %}
            {% endif %}
            {% set meter = states('sensor.pees_energy_house_load_yield') | float(0) %}
            {% if meter > 0 %}
              {{ meter }}
            {% else %}
              {{ lastlast }}
            {% endif %}
  - trigger:
      - trigger: state
        entity_id: sensor.pees_energy_export_yield
    sensor:
      - name: "PEES Export Yield - Sale"
        unique_id: pees_export_yield_sale
        unit_of_measurement: DKK
        device_class: monetary
        state: >-
          {% set price = states('sensor.pees_electricity_price_export') | float(0) %}
          {% set meter = states('sensor.pees_energy_export_yield') | float(0) %}
          {% if meter > 0 and this.attributes.last is defined %}
            {% set delta = meter - this.attributes.last | float(0) %}
          {% else %}
            {% set delta = 0 %}
          {% endif %}
            {{ price * delta }}
        attributes:
          last: >-
            {% if this.attributes.last is defined %}
              {% set lastlast = this.attributes.last | float(0) %}
            {% else %}
              {% set lastlast = 0 %}
            {% endif %}
            {% set meter = states('sensor.pees_energy_export_yield') | float(0) %}
            {% if meter > 0 %}
              {{ meter }}
            {% else %}
              {{ lastlast }}
            {% endif %}
# ---------------------------------------------
# HUAWEI SOLAR PEES INPUT - User Specific Input
# ---------------------------------------------
# version: 
# branch: 
# domain: https://github.com/JensenNick/huawei_solar_pees
# codeowner: Nick Jensen
#
# This is the optional "Huawei Solar PEES Input package" which is used to save your
# specific solar PV settings for the efficiency corrected power input sensor. This
# package can only be used along with the "Huawei Solar PEES package" and the code
# for the Lovelace card. The package allow you to save your specific solar PV settings
# between updates of the "Huawei Solar PEES package". If you do not use the "Efficiency
# Corrected Input Power Sensor" you do not need to do anything.
#
# You add your specific solar PV settings for the "Efficiency Corrected Input Power
# Sensor" in the Lovelace card. The efficiency corrected input power sensor has been
# implemented in the "Huawei Solar PEES package" so you do not need to copy/paste it
# from the Wiki Pages.
#
# You should only make changes in the Lovelace card, not in the code below. Advanced
# users can adjust the input_numbers, min, "max and step to their liking, but be aware
# of the impact that these input numbers have. Please refer to the Wiki Pages
#
# You still need to edit your input sensors in the huawei_solar_pees.yaml file if your
# input sensors do not match the ones used by default.
#
# -------------
# INPUT BOOLEAN
# -------------
input_boolean:
  efficiency_corrected_power_input:
    name: "Efficiency Corrected Power Input"
# ------------
# INPUT NUMBER
# ------------
input_number:
  ## --------------------
  ## Inverter #1 Settings
  inverter_1_operating_voltage_l1:
    name: "Inverter #1 Operating Voltage L1"
    min: 90
    max: 560
    step: 5
  inverter_1_operating_voltage_m1:
    name: "Inverter #1 Operating Voltage M1"
    min: 140
    max: 980
    step: 5
  inverter_1_overall_factor:
    name: "Inverter #1 Overall Factor"
    min: 98
    max: 102
    step: 0.2
  ## --------------------
  ## Inverter #2 Settings
  inverter_2_operating_voltage_l1:
    name: "Inverter #2 Operating Voltage L1"
    min: 90
    max: 560
    step: 5
  inverter_2_operating_voltage_m1:
    name: "Inverter #2 Operating Voltage M1"
    min: 140
    max: 980
    step: 5
  inverter_2_overall_factor:
    name: "Inverter #2 Overall Factor"
    min: 98
    max: 102
    step: 0.2
# ----------
# INPUT TEXT
# ----------
input_text:
  ## ------------------
  ## Electricity Prices
  electricity_price_import:
    name: "Electricity Price Import (Energi Data Service by Default)"
  electricity_price_export:
    name: "Electricity Price Export (Energi Data Service - Sale by Default)"
# ---------------
# TEMPLATE SENSOR
# ---------------
template:
  - binary_sensor:
      ## -------------------
      ## Inverter 1 is model
      - name: "Inverter 1 is L1"
        unique_id: inverter_1_is_l1
        state: >
          {{ 'L1' in states('sensor.inverter_1_model') }}
      - name: "Inverter 1 is M1"
        unique_id: inverter_1_is_m1
        state: >
          {{ 'M1' in states('sensor.inverter_1_model') }}
      ## -------------------
      ## Inverter 2 is model
      - name: "Inverter 2 is L1"
        unique_id: inverter_2_is_l1
        state: >
          {{ 'L1' in states('sensor.inverter_2_model') }}
      - name: "Inverter 2 is M1"
        unique_id: inverter_2_is_m1
        state: >
          {{ 'M1' in states('sensor.inverter_2_model') }}
  - sensor:
      ## --------------------------------------
      ## Electricity Price for Energy Dashboard
      - name: "Energi Data Service - Negative"
        unique_id: energi_data_service_negative
        unit_of_measurement: DKK/kWh
        state: >
          {{ states('sensor.energi_data_service') | float(0) * (-1) }}
      ## ----------------------------
      ## Tariff on Electricity Export
      - name: "Tariff Export"
        unique_id: tariff_export
        unit_of_measurement: DKK/kWh
        state: >
          {% set energinet_indfoedningstarif = 0.3 %}
          {% set energinet_balancetarif = 0.24 %}
          {% set konstant_indfoedningstarif = 0.5 %}
          {% set jyskenergi_balancetarif = 2.5 %}
            {{ (
            energinet_indfoedningstarif + 
            energinet_balancetarif + 
            konstant_indfoedningstarif + 
            jyskenergi_balancetarif 
            ) / 100 }}
      ## --------------
      ## Inverter Model
      - name: "Inverter #1 Model"
        unique_id: inverter_1_model
        state: >-
          {{ device_attr("sensor.inverter_input_power","model") | regex_findall_index('(SUN\d+-\d+KTL-[L|M|MB]\d+)|(IS-HYB-\d-\[1|3]PH)', 0) | first }}
        availability: >-
          {{ states('sensor.inverter_input_power') not in ['unknown','unavailable','none'] }}
      - name: "Inverter #2 Model"
        unique_id: inverter_2_model
        state: >-
          {{ device_attr("sensor.inverter_input_power_2","model") | regex_findall_index('(SUN\d+-\d+KTL-[L|M|MB]\d+)|(IS-HYB-\d-\[1|3]PH)', 0) | first }}
        availability: >
          {{ states('sensor.inverter_input_power_2') not in ['unknown','unavailable','none'] }}
      ## --------------------
      ## Inverter Rated Power
      - name: "Inverter #1 Rated Power"
        unique_id: inverter_1_rated_power
        unit_of_measurement: W
        state: >
          {% if '2KTL' in states('sensor.inverter_1_model') %}
            {{ 2000 }}
          {% elif '3KTL' in states('sensor.inverter_1_model') %}
            {{ 3000 }}
          {% elif '3-68KTL' in states('sensor.inverter_1_model') %}
            {{ 3680 }}
          {% elif '4KTL' in states('sensor.inverter_1_model') %}
            {{ 4000 }}
          {% elif '4-6KTL' in states('sensor.inverter_1_model') %}
            {{ 4600 }}
          {% elif '5KTL' in states('sensor.inverter_1_model') %}
            {{ 5000 }}
          {% elif '6KTL' in states('sensor.inverter_1_model') %}
            {{ 6000 }}
          {% elif '8KTL' in states('sensor.inverter_1_model') %}
            {{ 8000 }}
          {% elif '10KTL' in states('sensor.inverter_1_model') %}
            {{ 10000 }}el
          {% endif %}
        availability: >
          {{ states('sensor.inverter_1_model') not in ['unknown','unavailable','none'] }}
      - name: "Inverter #2 Rated Power"
        unique_id: inverter_2_rated_power
        unit_of_measurement: W
        state: >
          {% if '2KTL' in states('sensor.inverter_2_model') %}
            {{ 2000 }}
          {% elif '3KTL' in states('sensor.inverter_2_model') %}
            {{ 3000 }}
          {% elif '3-68KTL' in states('sensor.inverter_2_model') %}
            {{ 3680 }}
          {% elif '4KTL' in states('sensor.inverter_2_model') %}
            {{ 4000 }}
          {% elif '4-6KTL' in states('sensor.inverter_2_model') %}
            {{ 4600 }}
          {% elif '5KTL' in states('sensor.inverter_2_model') %}
            {{ 5000 }}
          {% elif '6KTL' in states('sensor.inverter_2_model') %}
            {{ 6000 }}
          {% elif '8KTL' in states('sensor.inverter_2_model') %}
            {{ 8000 }}
          {% elif '10KTL' in states('sensor.inverter_2_model') %}
            {{ 10000 }}
          {% endif %}
        availability: >
          {{ states('sensor.inverter_2_model') not in ['unknown','unavailable','none'] }}
